#!/usr/bin/env node
// Generated by LiveScript 1.3.1
var fs, path, fsExtra, browserify, yargs, argv, useSymlink, fed, slice$ = [].slice;
fs = require('fs');
path = require('path');
fsExtra = require('fs-extra');
browserify = require('browserify');
yargs = require('yargs');
argv = yargs.option('symlink', {
  alias: 's',
  description: "use symlink instead of hard copy to make main folder. default true",
  type: 'boolean'
}).help('help').alias('help', 'h').check(function(argv, options){
  return true;
}).argv;
useSymlink = argv.s != null ? argv.s : true;
fed = import$({
  root: '.',
  modules: []
}, JSON.parse(fs.readFileSync("package.json").toString()).frontendDependencies || {});
(fed.modules || []).map(function(obj){
  var root, info, id, ref$, i$, name, version, ret, that, desdir, maindir, b, srcdir;
  obj = typeof obj === 'string' ? {
    name: obj
  } : obj;
  root = path.join("node_modules", obj.name);
  info = JSON.parse(fs.readFileSync(path.join(root, "package.json")).toString());
  id = info._id || info.name + "@" + info.version;
  if (/\.\.|^\//.exec(id)) {
    throw new Error("fedep: not supported name in module " + obj.name + ".");
  }
  ref$ = id.split("@"), name = 0 < (i$ = ref$.length - 1) ? slice$.call(ref$, 0, i$) : (i$ = 0, []), version = ref$[i$];
  if (ret = /#([a-zA-Z0-9_.-]+)$/.exec(version)) {
    version = ret[1];
  }
  if (/\//.exec(version)) {
    version = version.replace(/\//g, '-');
  }
  name = (that = name[0])
    ? that
    : name[1]
      ? "@" + name[1]
      : name.join('@');
  desdir = path.join(fed.root, name, version);
  maindir = path.join(fed.root, name, "main");
  fsExtra.removeSync(desdir);
  fsExtra.ensureDirSync(desdir);
  if (obj.browserify) {
    b = browserify(typeof obj.browserify === 'object' ? obj.browserify : void 8);
    b.require(obj.name);
    b.bundle().pipe(fs.createWriteStream(path.join(desdir, name + ".js")));
    console.log(" -- (module -> browserify) -> " + desdir + " ");
  } else {
    if (obj.dir) {
      srcdir = path.join(root, obj.dir);
    } else {
      srcdir = path.join(root, "dist");
      if (!fs.existsSync(srcdir)) {
        srcdir = root;
      }
    }
    fsExtra.copySync(srcdir, desdir);
    console.log(" -- " + srcdir + " -> " + desdir + " ");
  }
  fsExtra.removeSync(maindir);
  if (useSymlink) {
    return fsExtra.ensureSymlinkSync(desdir, maindir);
  } else {
    return fsExtra.copySync(desdir, maindir);
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
